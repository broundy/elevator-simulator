import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class ElevatorSimulator {
    private static int DEFAULT_FLOORS = 2;
    private List<Elevator> elevators;

    public ElevatorSimulator(){
        List<Elevator> createdElevators = new ArrayList<Elevator>();
        createdElevators.add(this.createElevator(DEFAULT_FLOORS));
        elevators = createdElevators;
    }

    public ElevatorSimulator(int f, int e){
        List<Elevator> createdElevators = new ArrayList<Elevator>();
        for(int i=0; i<e; i++){
            createdElevators.add(this.createElevator(f));
        }
        elevators = createdElevators;
    }

    public List<Elevator> getElevators() {
        return elevators;
    } 

    public String getStartupMessage() {
        return "Starting up simulator with " + elevators + " elevators.";
    } 

    public static void main(String[] args) {
        ElevatorSimulator simulator;
        if(args.length == 2){
            String floors = args[0]; 
            String elevators = args[1];
            simulator = new ElevatorSimulator(Integer.valueOf(floors), Integer.valueOf(elevators));
            System.out.println(simulator.getStartupMessage());
        }else{
            simulator = new ElevatorSimulator();
        }
    }

    public Elevator createElevator(int floors){
        return new Elevator(floors);
    } 

    public void requestElevator(int requestingFloor){
        System.out.println("Requesting an elevator for floor " + requestingFloor);
        Elevator e = this.getNearestElevator(requestingFloor);
        e.moveToFloor(requestingFloor);
        e.openDoors();
        e.closeDoors();
    }

    public Elevator getNearestElevator(int floor){
        Elevator nearest = null;
        for(Elevator elevator : elevators){
            if(nearest == null){
                nearest = elevator;
            }else{
                // Find the difference between requested floor and an elevators current floor
                // and if an elevator is closer use it
                int currentFloor = elevator.getCurrentFloor();
                int nearestCurrentFloor = nearest.getCurrentFloor();
                int currentFloorDifference = Math.abs(currentFloor - floor);
                int nearestFloorDifference = Math.abs(nearestCurrentFloor - floor);
                if(currentFloorDifference < nearestFloorDifference){
                    nearest = elevator;
                }
            }
        }
        return nearest;
    }
}
